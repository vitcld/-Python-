# -*- coding: utf-8 -*-
"""tupla_e_dicionário_D2_victor.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1AeAoS0oL7QYuoPZTC59fa6od9cbxt0dc

#Definindo uma tupla
Uma tupla se parece exatamente com uma lista, exceto por usar
parênteses no lugar de colchetes. Depois de definir uma tupla, podemos
acessar elementos individuais usando o índice de cada item, como
faríamos com uma lista
"""

#Tupla de café
cafe=("cappuccino","expresso","mocha")
print(cafe)

#Slice de tupla
cafe=("cappuccino","expresso","mocha")
print(cafe[0:2]) #[:] aparecerá apenas ao limite

#Atualização de tupla
cafe=("cappuccino","expresso","mocha")
cafe[0]="com leite"
#TypeError: 'tuple' object does not support item assignment

"""# FAÇA VOCÊ MESMO

– Buffet: Um restaurante do tipo buffet oferece apenas cinco tipos básicos
de comida. Pense em cinco pratos simples e armazene-os em uma tupla.

• Use um laço for para exibir cada prato oferecido pelo restaurante.

• Tente modificar um dos itens e cerifique-se de que Python rejeita a mudança.

• O restaurante muda seu cardápio, substituindo dois dos itens com pratos
diferentes. Acrescente um bloco de código que reescreva a tupla e, em
seguida, use um laço for para exibir cada um dos itens do cardápio
revisado.

"""

buffet=("carne de sol","podrão","baião de 2","macaxera","munguzá")
for comida in buffet:
 print(comida)

buffet=("carne de sol","podrão","baião de 2","macaxera","munguzá")
buffet[0]="sorvete"
print(buffet)

buffet=("carne de sol","podrão","baião de 2","macaxera","munguzá")
buffet=buffet[:0]+("banoffe","sorvete")+buffet[2:]
for comida in buffet:
 print(comida)

"""# Agenda
Como organizar os nomes e telefones dos seus amigos em Python?
"""

#Opção 1: usar uma lista
listaNomeTels = ["Maria", [99887766,99887755],"Pedro", [92345678], "Joaquim", [99887711, 99665533]]
print(listaNomeTels)

#Como recuperar o telefone de Maria?
tel = listaNomeTels[listaNomeTels.index("Maria")+1]
print(tel)

#Opção 2: usar duas listas
#Uma lista com os nomes
#Uma segunda lista com os telefones
listaNomes = ["Maria", "Pedro", "Joaquim"]
listaTelefones = [[99887766,99887755],[92345678], [99887711, 99665533]]
#Como recuperar o telefone de Maria?
tel = listaTelefones[listaNomes.index("Maria")]
print(tel)

#Acrescentar Novos Valores
#Basta fazer uma atribuição a uma chave não existente
agenda = {}
agenda["Teresa"] = [65443322]
print(agenda)

"""#Dicionário
Estrutura de dados que implementa mapeamentos entre uma chave (key) e algum conteúdo (value).
A chave funciona como um índice para acessar o conteúdo.
Conteúdo pode ser qualquer coisa, inclusive outro dicionário.
"""

#Dicionário onde a chave é o nome e o conteúdo é alista de telefones
agenda = {"Maria": [99887766, 99887755],"Pedro": [92345678], "Joaquim": [99887711,99665533]}
telMaria = agenda["Maria"]
print(telMaria)

#Função dict()
#Função dict() pode ser usada para criar dicionários
#Pode receber dois tipos de parâmetros

#dict() com lista de tuplas
#Cada tupla da lista contém uma chave e conteúdo
produtos = dict([(10, 4.5), (20, 5.99)])
valorProd = produtos[10]
print(valorProd)

#fromkeys(lista, valor) = {}.fromkeys([])
#Retorna um novo dicionário cujas chaves são os elementos da lista e cujos valores são todos iguais a valor
#Se valor não for especificado o default é None
{}.fromkeys([2,3])
dict.fromkeys(["Joao", "Maria"], 20)