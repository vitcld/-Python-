# -*- coding: utf-8 -*-
"""apostila.D2.victor.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1TAZMZ4q69n6f5FMzmTyFJ84EMzatOp2c

#Apostila
Exercicios da apostila proposta em aula
"""

#Exercicio 1
def contar_nomes(lista_nomes):
    contagem = {}
    for nome in lista_nomes:
        if nome in contagem:
            contagem[nome] += 1
        else:
            contagem[nome] = 1
    return contagem


lista_nomes = ['João', 'Maria', 'Pedro', 'João', 'Maria', 'Lucas', 'Pedro', 'Maria']

contagem_nomes = contar_nomes(lista_nomes)

for nome, quantidade in contagem_nomes.items():
    print(f'{nome}: {quantidade} vezes')

+#Exercicio 2
def contar_nomes(lista_nomes):
    contagem = {}
    for nome in lista_nomes:
        if nome in contagem:
            contagem[nome] += 1
        else:
            contagem[nome] = 1
    return contagem

lista_nomes = []

print("Digite os nomes um por um. Pressione Enter sem digitar nada para finalizar.")
while True:
    nome = input("Digite um nome: ")
    if nome == "":
        break
    lista_nomes.append(nome)

contagem_nomes = contar_nomes(lista_nomes)

for nome, quantidade in contagem_nomes.items():
    print(f'{nome}: {quantidade} vezes')

#Exercicio 3
import re

def substituir_nomes_por_asteriscos(mensagem):
    padrao = r'\b[A-Z][a-z]*\b'
    nomes_proprios = re.findall(padrao, mensagem)

    nova_mensagem = mensagem
    for nome in nomes_proprios:
        nova_mensagem = nova_mensagem.replace(nome, '*' * len(nome))

    return nova_mensagem

mensagem = input("Digite uma mensagem: ")

nova_mensagem = substituir_nomes_por_asteriscos(mensagem)

print("Nova mensagem com nomes próprios substituídos por asteriscos:")
print(nova_mensagem)

#Exercicio 4
def produto_escalar(vetor1, vetor2):
    escalar = 0
    for i in range(3):
        escalar += vetor1[i] * vetor2[i]
    return escalar

def produto_vetorial(vetor1, vetor2):
    produto = [0, 0, 0]
    produto[0] = vetor1[1] * vetor2[2] - vetor1[2] * vetor2[1]
    produto[1] = vetor1[2] * vetor2[0] - vetor1[0] * vetor2[2]
    produto[2] = vetor1[0] * vetor2[1] - vetor1[1] * vetor2[0]
    return produto

vetor1 = []
vetor2 = []
print("Digite os valores do primeiro vetor:")
for i in range(3):
    valor = float(input(f"Digite o valor {i+1}: "))
    vetor1.append(valor)

print("\nDigite os valores do segundo vetor:")
for i in range(3):
    valor = float(input(f"Digite o valor {i+1}: "))
    vetor2.append(valor)

escalar = produto_escalar(vetor1, vetor2)
print("\nProduto Escalar:", escalar)

vetorial = produto_vetorial(vetor1, vetor2)
print("Produto Vetorial:", vetorial)

#Exercicio 5
def ler_numeros(N):
    numeros = []
    for i in range(N):
        numero = float(input(f"Digite o {i+1}º número: "))
        numeros.append(numero)
    return numeros

N = int(input("Digite o valor de N: "))

lista_numeros = ler_numeros(N)

print("Lista de números lidos:", lista_numeros)

#Exercicio 6
def ler_numeros(N):
    numeros = []
    for i in range(N):
        numero = float(input(f"Digite o {i+1}º número: "))
        numeros.append(numero)
    return numeros

def calcular_soma(numeros):
    return sum(numeros)

def calcular_media(numeros):
    return sum(numeros) / len(numeros)

def encontrar_maior(numeros):
    return max(numeros)

def encontrar_menor(numeros):
    return min(numeros)

N = int(input("Digite o valor de N: "))

lista_numeros = ler_numeros(N)

soma = calcular_soma(lista_numeros)

media = calcular_media(lista_numeros)

maior = encontrar_maior(lista_numeros)

menor = encontrar_menor(lista_numeros)

print("\nResultados:")
print("Soma dos itens:", soma)
print("Média dos valores:", media)
print("Maior valor:", maior)
print("Menor valor:", menor)